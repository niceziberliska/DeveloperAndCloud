---
AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template for Auto Scaling Group with ALB and VPC resources"

#Metadata:
  #template metadata

#Parameters:
  #SubnetIdParameter:
    #Type: 'AWS::EC2::Subnet::Id'
    #Description: 'The Subnet ID for the Auto Scaling Group'
  

#Rules:
  #set of rules

#Mappings:
  #set of mappings

#Conditions:
  #set of conditions

#Transform:
  #set of transforms

Resources:
  TestAndDemoSecGrp20241009:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AllowHTTPAndSSHTraffic
      GroupName: TestAndDemoSecGrp20241009
      SecurityGroupEgress: 
        - IpProtocol: -1 
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443  
          ToPort: 443
          CidrIp: 0.0.0.0/0
     #Tags: 
     #- Tag
     #VpcId: String
  TestAndDemoEC201:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: ami-054a53dca63de757b
      SecurityGroupIds:
        - !Ref TestAndDemoSecGrp20241009
  
  TestAndDemoLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData: 
        ImageId: 'ami-054a53dca63de757b'
        InstanceInitiatedShutdownBehavior: 'stop'
        InstanceType: 't2.micro'
        KeyName: 'DemoAndTestEC2VM01key'
        MaintenanceOptions: 
          AutoRecovery: 'default' 
        SecurityGroupIds: 
          - !Ref TestAndDemoSecGrp20241009
        UserData: !Base64 |
          #!/bin/bash
          dnf update -y
          dnf install nginx -y
          systemctl start nginx
          systemctl enable nginx
    
  TestAndDemoAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchTemplate: 
        LaunchTemplateId: !Ref TestAndDemoLaunchTemplate
        Version: !GetAtt TestAndDemoLaunchTemplate.LatestVersionNumber
      MinSize: '1' 
      MaxSize: '3' 
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2

  TestAndDemoALBSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: TestAndDemoALBSecGrp
      GroupDescription: AllowHTTPAndHTTPSTraffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
    
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TestAndDemoTargetGroup
      Protocol: HTTP 
      Port: 80
      VpcId: !Ref Vpc
      TargetType: instance 
      HealthCheckPath: /

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerName: TestAndDemoALB
      Subnets:
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
      SecurityGroups: 
        - !Ref TestAndDemoALBSecGrp
  
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer 
      Port: 80
      Protocol: HTTP

  ALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS

  Vpc: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: 
        Fn::Select:
          - 0 
          - Fn::GetAZs: "eu-west-1"
      VpcId: !Ref Vpc

  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.128/25
      AvailabilityZone: 
        Fn::Select:
          - 1 
          - Fn::GetAZs: "eu-west-1"
      VpcId: !Ref Vpc

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  RoutePublic:
    Type: AWS::EC2::Route 
    Properties:
      DestinationCidrBlock: 0.0.0.0/0 
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

  SubnetPublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic1
      RouteTableId: !Ref RouteTablePublic 

  SubnetPublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic2
      RouteTableId: !Ref RouteTablePublic 

  


   




      
#LaunchTemplateName: String
#VersionDescription: String

    
 


#Outputs:
  #set of outputs2
